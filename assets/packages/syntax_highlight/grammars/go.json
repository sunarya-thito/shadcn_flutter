{
  "name": "Go",
  "version": "1.0.0",
  "fileTypes": ["go"],
  "scopeName": "source.go",
  "foldingStartMarker": "\\{\\s*$",
  "foldingStopMarker": "^\\s*\\}",
  "patterns": [
    {
      "name": "meta.package.go",
      "begin": "^\\s*package\\b",
      "end": "$",
      "patterns": [
        {
          "include": "#identifier"
        }
      ]
    },
    {
      "name": "meta.import.go",
      "begin": "^\\s*import\\b",
      "end": "(?=^[^\\s]|\\Z)",
      "patterns": [
        {
          "name": "string.quoted.double.go",
          "match": "\"[^\"]*\""
        },
        {
          "include": "#identifier"
        }
      ]
    },
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#functions"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.go",
          "match": "//.*$"
        },
        {
          "name": "comment.block.go",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.go",
          "match": "\\b(if|else|for|range|switch|case|select|break|continue|fallthrough|return|go|defer|goto|default)\\b"
        },
        {
          "name": "keyword.declaration.go",
          "match": "\\b(var|const|type|struct|interface|func|package|import|map|chan)\\b"
        },
        {
          "name": "keyword.storage.go",
          "match": "\\b(bool|byte|complex64|complex128|error|float32|float64|int|int8|int16|int32|int64|rune|string|uint|uint8|uint16|uint32|uint64|uintptr)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.go",
          "match": "\\b(true|false|iota|nil)\\b"
        },
        {
          "name": "constant.numeric.go",
          "match": "\\b\\d+(_\\d+)*\\.?\\d*([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.character.escape.go",
          "match": "\\\\."
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.go",
          "match": "\\+\\+|--|==|!=|<=|>=|&&|\\|\\||<<|>>|&\\^|\\+=|-=|\\*=|/=|%="
        },
        {
          "name": "keyword.operator.assignment.go",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic.go",
          "match": "[+\\-*/%]"
        },
        {
          "name": "keyword.operator.bitwise.go",
          "match": "[&|^]"
        },
        {
          "name": "keyword.operator.logical.go",
          "match": "&&|\\|\\||!"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.go",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.go",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.raw.go",
          "begin": "`",
          "end": "`"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.go",
          "match": "[,;]"
        },
        {
          "name": "punctuation.bracket.go",
          "match": "[\\[\\](){}]"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.go",
          "begin": "\\bfunc\\b",
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#identifier"
            }
          ]
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "name": "variable.other.go",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
